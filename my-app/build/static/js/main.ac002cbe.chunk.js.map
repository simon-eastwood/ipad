{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["model","Model","fromJson","global","layout","App","factory","node","getComponent","getName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAwCMA,EAAQC,QAAMC,SApCG,CACrBC,OAAQ,GACRC,OAAQ,CACN,KAAQ,MACR,OAAU,IACV,SAAY,CACV,CACE,KAAQ,SACR,OAAU,GACV,SAAY,EACZ,SAAY,CACV,CACE,KAAQ,MACR,KAAQ,MACR,UAAa,YAInB,CACE,KAAQ,SACR,OAAU,GAEV,SAAY,EACZ,SAAY,CACV,CACE,KAAQ,MACR,KAAQ,MAER,UAAa,gBA0BVC,MAhBf,WASE,OACE,cAAC,SAAD,CACEL,MAAOA,EACPM,QAVY,SAACC,GAEf,GAAkB,WADFA,EAAKC,eAEnB,OAAO,iCAASD,EAAKE,gBCjCZC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ac002cbe.chunk.js","sourcesContent":["import {Layout, Model, TabNode, IJsonModel} from 'flexlayout-react';\nimport './App.css';\nimport 'flexlayout-react/style/light.css';\n\nvar json : IJsonModel= {\n  global: {},\n  layout: {\n    \"type\": \"row\",\n    \"weight\": 100,\n    \"children\": [\n      {\n        \"type\": \"tabset\",\n        \"weight\": 50,\n        \"selected\": 0,\n        \"children\": [\n          {\n            \"type\": \"tab\",\n            \"name\": \"One\",\n            \"component\": \"button\"\n          }\n        ]\n      },\n      {\n        \"type\": \"tabset\",\n        \"weight\": 50,\n\n        \"selected\": 0,\n        \"children\": [\n          {\n            \"type\": \"tab\",\n            \"name\": \"Two\",\n\n            \"component\": \"button\"\n          }\n        ]\n      }\n    ]\n  }\n};\n\nconst model = Model.fromJson(json);\n\nfunction App() {\n\n  const factory = (node: TabNode) => {\n    var component = node.getComponent();\n    if (component === \"button\") {\n      return <button>{node.getName()}</button>;\n    }\n  }\n\n  return (\n    <Layout\n      model={model}\n      factory={factory} />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}